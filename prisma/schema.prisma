// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String?
  email         String?   @unique
  password      String?
  image         String?   @default("/user.svg")
  emailVerified DateTime?

  role      UserRoles  @default(USER)
  adminPin  String?
  questions Question[]

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question      String
  options       Option[]
  correctAnswer String
  explanation   String?

  status   QuestionStatus @default(PENDING)
  approved DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reports Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Option {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  value      String
  isImage    Boolean @default(false)
  fileName   String?
  questionId String  @db.ObjectId

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("options")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  subjects CategorySubject[] @relation("CategorySubject")

  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Subject {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  categories CategorySubject[] @relation("CategorySubject")

  topics Topic[]

  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

model Topic {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  question Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("topics")
}

model CategorySubject {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  categoryId String @db.ObjectId
  subjectId  String @db.ObjectId

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "CategorySubject")
  subject  Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "CategorySubject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, subjectId])
  @@index([categoryId], name: "category_idx")
  @@index([subjectId], name: "subject_idx")
  @@map("category_subject")
}

model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  questionId String   @db.ObjectId
  questions  Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reports")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
